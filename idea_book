| vim: ft=reva :

21:46 < caleb-> gogonkt: 在写自己的 ime?
21:46 < letoh> .cin 一般就是 table 吧... 當然，可以用 hash table 來改進查詢的速度
21:47 < caleb-> gogonkt: 可以先看看 gtk 自带的简单 immodule
21:47 < caleb-> gogonkt: 或者研究下 gcin 的 IMdkit
21:47 < caleb-> gogonkt: gcin 和 scim 用的 IMdkit 基本一模一样
21:34 < gogonkt> 先力氣放在ime engine上
Sun Sep 27 21:53:53 HKT 2009
12:57 < gogonkt> 把table.cin 轉成 forth programe 就完成了
12:58 < gogonkt> :table-abc ." 就 完 成 了" ;
13:00 < gogonkt> 然後，: parser ( string1 -- font ) $table-name calls ;
13:00 < gogonkt> 這樣，stack 里就有了 ." 就 完 成 了" 這幾個字
2009年 09月 28日 星期一 13:02:43 HKT
15:38 < gogonkt> howto dynamic calls a word? for example, string ." table-foo", call word table-foo 
15:39 < gogonkt> I want call word table-foo, dynamic
15:46 < I440r> im not sure im following you
15:46 < I440r> you want to call a word whose name is expressed between the quotes?
15:47 < I440r> ans has evaluate. horrible word
15:47 < I440r>  ," blah" evaluate
15:47 < gogonkt> yes
15:47 < I440r> in the above instance the word blah is executed
15:47 < I440r> : foo " blah" evaluate ; or something
15:47 < I440r> which i say is MORONIC
15:47 < I440r> : foo blah ;
15:47 < I440r> dun
15:48 < I440r> if you knew the name of the word you wanted to execute at compile time you should have compiled its XT
15:48 < I440r> not a string with its name
15:48 < I440r> if you dont know the name of the word until RUN time thats different
15:49 < gogonkt> I wanted execute at runtime
15:49 < I440r> ok it will be executed at run time
15:49 < I440r> what you want to do is searchj for the word name at run time (something taht should be done at compile time if 
               you can)
15:49 < I440r> then execute its xt
15:50 < I440r> if you know the NAME of a word AT compile time. COMPILE ITS XT lol
15:50 < I440r> dont compile a string with its name in it and then evaluate taht string
15:50 < I440r> thats sillyness
15:50 < I440r> but if you want to execute a word whose name you dont know at compile time.... thats different
15:50 < gogonkt> word-name in 'stack' and want execute word named 'word-name'
15:51 < I440r> for instance you might have a game where the user can input different strings.  the things the user is inputting 
               is a WORD name
15:51 < I440r> " north [enter]"
17:16 < ASau> gogonkt: where possible use ['] ' EXECUTE instead of EVALUATE
17:17 < gogonkt> what is diference between?
17:18 < ASau> EVALUATE uses dictionary search, while EXECUTE executes already resolved word.
2009年 09月 28日 星期一 17:27:35 HKT
2009年 10月 02日 星期五 21:06:44 HKT
21:05 < gogonkt> linux 的換行符是 crlf 麼?
21:05 <@sleeve> 错
21:05 <@sleeve> 只有一个
21:05 <@sleeve> lf
20:37 < gogonkt> 查找對應的 編碼<=>字/詞
20:41 < gogonkt> 對了，文件是一行行，讀進來也是一行行的哦
20:48 < gogonkt> foxes: 我想直接從plan text 讀進來操作
20:49 < gogonkt> 碼表處理就簡單更多
2009年 10月 02日 星期五 21:44:57 HKT
" pns 你 ix 我 pal 他 iwn 這 qe 里" pad place
pad count type
2009年 10月 02日 星期五 23:00:55 HKT
ok> pad count " ix" search
ok> drop type
ix 我 pal 他 iwn 這 qe 里
2009年 10月 02日 星期五 23:25:18 HKT
01:15 < gogonkt> i want cut first word out
01:15 < tathi> take a look at skip and scan if your Forth has them
01:15 < gogonkt> skip, scan ok
01:16 < ASau> gogonkt: 2dup bl scan nip /string
01:19 < ASau> gogonkt: scan, skip and /string are your friends.
2009年 10月 03日 星期六 01:29:27 HKT
" 你 ix 我 pal 他 iwn 這 qe 里" 2dup bl /char .s cr nip - .s cr type
2009年 10月 03日 星期六 02:13:21 HKT
Sat Oct  3 21:15:48 HKT 2009
: (testkey) ( -- )
repeat
ekey dup emit 'Q <> 
 while ;
Sat Oct  3 21:17:02 HKT 2009
23:11 < gogonkt> recursion and loops which is better in forth?
23:12 < tathi> It depends. :)
23:14 < tathi> I tend to use loops more than recursion.
23:14 < gogonkt> mh
23:15 < I440r> unless your doing something moronic like an ackerman function itterative methods are generally faster and WAY 
               simpler than recursive methods
23:16 < gogonkt> : cleave ." separates" ;
23:16 < gogonkt> : cleave ." joins " prior cleave ;
23:18 < I440r> : fib 0 1 rot 1+1 do tuck + loop nip ;
23:18 < I440r> forgot to give it a name
23:18 < tathi> Heh.
23:18 < tathi> And here I was trying to figure out if it actually did return 0.
23:19 < I440r> lol
23:19 < I440r> if you write that in the more traditional recusive way it will recurse on itself one hundred and fourteen 
               MILLION times to calculate the 40th fib
23:27 < tathi> A direct translation to recursion looks like this:
23:27 < tathi> : (fib)  >r  tuck +  r> 1- dup if recurse then ;
23:27 < tathi> : fib 0 1 rot (fib) drop nip ;
Sun Oct  4 01:35:20 HKT 2009
00:24 < letoh> gogonkt: 各家的 ffi 糖衣不同，我也還沒去追 reva 怎麼做的  不過給你個 hint
00:24 < letoh> gogonkt: 從 lib/ui 去追追看  可以看到有趣的東西:p
00:25 < gogonkt> 看了libs 里的東西，都不知道那參數哪來的
00:25 < letoh> 參數? 不都從 stack 來的嗎:p
00:26 < gogonkt> 看過了，更雲里霧里了....
00:26 < letoh> lib/ui/gtk2 看過了嗎? 
00:26 < gogonkt> 如 data: gtk_major_version as GTK_MAJOR
00:27 < gogonkt> gtk_major_version, GTK_MAJOR, 從哪來?
00:27 < letoh> great! reva 連 opengl binding 都準備好了
00:27 < gogonkt> 2 func: gtk_init 這 2 是什麼東東?
00:28 < gogonkt> 0 constant GTK_WINDOW_TOPLEVEL
00:28 < gogonkt> 還這個.....  ~@_@~
00:28 < letoh> 這不就是 ffi 用法嗎
00:28 < letoh> constant 是很基本的 forth 語法阿...
00:29 < gogonkt> 還一堆的東西從哪里找，如果自已做ffi 寫這個文件的話
00:30 < gogonkt> 不理解 GTK_WINDOW_TOPLEVEL 這個哪里來的
00:30 < letoh> 應該照著抄就行吧
00:30 < letoh> 這些都是 gtk 裡定義的常數  你可以看過就算  不用理它
00:30 < letoh> 重點在那個 func:
00:31 < gogonkt> 他不會亂寫出來的名字吧
00:32 < letoh> 不是阿  你要先知道 exported interface.. 然後透過 ffi word 來和 forth 橋接起來
00:32 < gogonkt>  exported interface ?
00:33 < letoh> 就是你要用的 IMkit 提供了哪些函式可以用
00:33 < gogonkt> 這個從哪里找?  exported interface
00:34 < gogonkt> 源碼里有麼?
00:35 < letoh> 嗯  有  或用 dump tool 去找
00:35 < letoh> 不過你不用全部列出來  先把你需要的函式界面找出來就好
00:35 < gogonkt>  % l lib 
00:35 < gogonkt> FrameMgr.c  i18nAttr.c  i18nIc.c       i18nMethod.c  i18nUtil.c  IMConn.c    IMValues.c  Xi18nX.h   Xtrans.h
00:35 < gogonkt> FrameMgr.h  i18nClbk.c  i18nIMProto.c  i18nPtHdr.c   i18nX.c     IMMethod.c  Makefile    XimFunc.h
00:35 < gogonkt> 哪個是?
00:36 < gogonkt> % l include 
00:36 < gogonkt> IMdkit.h  Xi18n.h  XimProto.h
00:36 < gogonkt> exported interface 長什麼樣子的
00:36 < letoh> 我沒看過 IMkit  不過我猜應該 IMdkit.h 會有一些資訊
00:37 < letoh> gogonkt: 例如 libc 提供了 exit
00:37 < gogonkt> http://groups.google.com/group/comp.lang.forth/browse_thread/thread/57e282bef6845ff0?hl=en#
00:38 < gogonkt> 大概我的問題都寫了
00:38 < letoh> 你想在 forth 裡叫用 libc 的 exit 函式，你得先知道它的界面
00:38 < gogonkt> 嗯 
00:38 < letoh> 它的 c 宣告是  void exit(int)
00:39 < letoh> 然後用 ffi word 轉成 forth 認得的資訊，轉成一個真正的 word，這樣你就可以使用了
00:40 < gogonkt> 要寫C 的代碼麼?
00:41 < letoh> 不用
00:41 < gogonkt> http://www.swig.org/tutorial.html
00:41 < letoh> 你都在 forth 了還寫 c 代碼做啥
00:41 < gogonkt> 這里講要寫 abc.i
00:41 < letoh> 不過如果是像 factor 那種惡搞法  看起來的確就是 c 代碼:p
00:42 < letoh> gogonkt: 你看錯地方了... 不需要去看 swig
00:42 < gogonkt> @_@
00:42 < gogonkt> 我還看了 CFFI ...
00:43 < letoh> 不用...
00:43 < gogonkt> c 宣告是  void exit(int) <-- 怎樣找這個?
00:43 < letoh> 你專心看懂 reva 的 ffi word 怎麼用就好
00:43 < letoh> man 3 exit
00:44 < gogonkt> gtk2 的呢?
00:44 < letoh> 或是去 stdlib.h 裡找
00:44 < letoh> gtk2 當然就是 gtk.h 阿
00:45 < letoh> gogonkt: 我建議你先找個簡單的 .so 玩玩  不要一開始就找 gtk2
00:45 < letoh> 感覺你並不是很清楚 forth ffi 在做什麼事...
00:45 < gogonkt> 如我有了IMdkit 的碼包，怎麼知道找什麼是 exported interface  ?
00:46 < gogonkt> Bingo !!!
00:46 < gogonkt> ^O^ 哇哈哈!
00:47 < letoh> 一般來說  找一下 .h 裡的宣告，只要開頭不是 static 的都是
00:47 < gogonkt> 是調用外部的funtion 吧 - -b....
00:47 < letoh> 不怎麼精確的答案
00:47 < gogonkt> 精確的答案是...
00:48 < letoh> 我上面都講過了@_@   不過當然也只是我對 forth ffi 的認知啦  也許也不太精確就是XD
2009年 10月 14日 星期三 01:40:02 HKT
方向 engin -> xim 部分 -> GUI 部分 -> 出來一個 prototype -> 再完善engine and GUI

Wed Oct 14 21:01:19 HKT 2009
18:23 < crc> variable: creates a variable with an initial value
18:23 < crc> e.g.,
18:23 < crc> 10 variable: foo
18:23 < crc> foo will contain 10 right off the bat

Wed Oct 14 21:03:03 HKT 2009
00:48 < freeflyi1g> gogonkt: 你的输入法看的怎么样了
00:49 < gogonkt> 還是用 IMdkit 好了
00:49 < Zephyr> gogonkt，你在做输入法？词库，和哈希算法是最关键的
00:50 < freeflyi1g> gogonkt: 去完善imbus好了
00:50 < gogonkt> imbus 文檔都沒有 0_0
00:52 < freeflyi1g> gogonkt: 你还是没搞清 IM/IME的关系
00:52 < gogonkt> IM/IME?  有什麼不同
00:54 < freeflyi1g> gogonkt: sunpinyin只是个IME, 
00:54 < freeflyi1g> IM一般是个framework
00:54 < freeflyi1g> 比如scim/ibus/uim
00:55 < freeflyi1g> gogonkt: 比如你想写个IME, 你可以将google pinyin 移植到scim或者ibus下
00:55 < gogonkt> fcitx 是 IME 吧?
00:55 < freeflyi1g> gogonkt: fcitx时用XIM的，不仅仅时个engine
00:56 < gogonkt> IM engine ?
00:57 < freeflyi1g> gogonkt: 小日本的uim也很有前途，架构很清晰易懂
00:58 < freeflyi1g> gogonkt: 不过imbus的理念更好些
00:58 < gogonkt> imbus 的文檔哪有?
00:59 < freeflyi1g> gogonkt: svn co回来用doxygen自己生成
01:00 < freeflyi1g> 人家makefile写好了，你直接make就可以
01:01 < freeflyi1g> gogonkt: IME的难度在于你的算法够不够好
01:01 < freeflyi1g> gogonkt: 比如 sunpinyin用的slm的
01:03 < freeflyi1g> gogonkt: http://blogs.sun.com/yongsun/entry/sunpinyin_code_tour_6
01:03 < BadGirl> SunPinyin Code Tour (6) - 素心如何天上月 (Yong Sun's Blog)


2009年 10月 20日 星期二 04:55:31 HKT
04:51 < crcx> in retro:   macro: .self last @ d->name literal, ` type ;
04:43 < I440r> : .self create last @ , does> ..... ; 
04:43 < I440r> .self blah
04:43 < I440r> .self foo
04:44 < I440r> what comes after the "does>" part would be easy in isforth
04:47 < I440r> : .id  ( nfa --- )  count mask and type ;
04:47 < I440r> the mask is needed and its value depends on how many bits of a nfa's count byte are for the name length
04:47 < gogonkt> mask ?
04:47 < I440r> and how many are for lex bits
04:47 < gogonkt> no mask here :(
04:48 < I440r> im making it up
04:48 < I440r> you need to define the value of mask
04:48 < I440r> SOME bits in the NFA's count byte will be used as flags
04:48 < I440r> usually to flag a word as being immediate or not
04:48 < I440r> whatever bits your particular forth uses you have to mask out
04:48 < I440r> in isforth mask would be $3f

Sun Oct 25 05:14:52 HKT 2009
22:42 < gogonkt> caleb-: 在?
22:43 < caleb-> 在
22:43 < gogonkt> IM 怎麼取得用戶type 了什麼?
22:44 < gogonkt> IMdkit 提供的麼?
22:45 < caleb-> 由 server 去抓，IMdkit 不管
22:45 < caleb-> gogonkt: 可參考一些 hotkey 程序
22:45 < gogonkt> 是不是和GUI無關的?
22:45 < caleb-> 可以無關
22:46 < gogonkt> oh, 那我可以分出來一塊了
22:46 < caleb-> 所以會有搶 hotkey 的情形 :P
22:46 < caleb-> kernel, X, WM, hotkey server, IM server, clients
22:47 < gogonkt> 有什麼hotkey 的程序?
22:47 < caleb-> 所有環節都可能有人搶 key
22:47 < gogonkt> 0_0
22:47 < caleb-> xbindkeys
22:47 < gogonkt> ok
22:48 < gogonkt> xev 也可?
22:49 < caleb-> 很多做法均可
22:49 < caleb-> 絕大部份 WM 都有實作 hotkey detect
22:49 < caleb-> 也有 kernel level 的 hotkey detect (但會限制 kernel 種類)
22:50 < b4283> quake 3 會把所有key+滑鼠全部搶走 XD
22:50 < caleb-> gogonkt: 處理完不要的 key 記得要 pass 給其它程序用
22:51 < b4283> 當機只能用 ssh 連進來砍…而且還不一定能復原
22:51 < gogonkt> 哦
22:51 < caleb-> gogonkt: 比如收到 enter, 但剛好發現 IME 此時用不到 enter, 就要 pass 給其它程序
22:51 < caleb-> b4283: 應該可以用 Sys Rq 抓回來
22:51 < gogonkt> 先看看xbindkeys, 再看看 fcitx
22:51 < b4283> Alt-sysrq ?
22:52 < b4283> 沒試過說.. 也許可以
22:52 < caleb-> gogonkt: 直接看 fcitx 好了
22:52 < gogonkt> o...也是
22:52 < caleb-> gogonkt: fcitx 是 XIM only 適合當簡易 demo
22:53 < gogonkt> 分了塊，到時再寫其他的好了
22:54 < caleb-> 先求有再求好
22:54 < caleb-> 反正 forth 到時還是要重構
22:54 < gogonkt> o,,,,記得有一個xenv loop 是不是就是這一塊?
22:56 < caleb-> XIM 是 server - client, 但 GTK / Qt immodule 是 GUI toolkit plugin, 可以不寫成 server - client
22:57 < gogonkt> 聽不明白...
22:57 < letoh> immodule 只處理 protocol.. server/client 的部份由 gtk 處理掉?
22:57 < caleb-> gogonkt: 可以想成 GTK module，例如有 GTK png module 則 GTK 程序可顯示 png
22:58 < gogonkt> 其實你說的這一堆，在一個輸入法裡起什麼作用 ?
22:58 < caleb-> immodule 只是一個 GTK module, 把它當成 GTK 常備功能就對了
22:59 < caleb-> gogonkt: scim 把 immodule 和 XIM 分開，所以在執行 GTK / Qt 程序前不用先 init IM server
23:00 < gogonkt> 我看 UIM，又說沒用到 XIM，XIM究竟是什麼作用 ?
23:00 < caleb-> ~$ gqview & -> load libgtk -> load gtk immodule -> 所以 gqview 裡可用 gtk immodule
23:00 < caleb-> 不用先啟動 IM server
23:01 < caleb-> 但如果用 XIM 就 *一定* 要在 XIM client 啟動前先啟動 XIM server
23:01 < letoh> caleb-: 乾脆出一本《第一次寫 IM 就上手》
23:01 < gogonkt> 對啊
23:01 < caleb-> ~$ gqview & -> load libgtk -> load XIM immodule wrapper -> gqview 要找 XIM server, 若找不到就沒輸入法
23:02  * caleb- 一知半解
23:02 < gogonkt> 網上一個這樣的文也冇 :(
23:02 < caleb-> gogonkt: scim 這種好處是，關閉所有 gtk 程序後，scim 也跟著消失
23:03 < letoh> 一般都是找個現成的程式來追吧
23:03 < letoh> 大概瞭解架構後，追起來就會輕鬆一點
23:03 < caleb-> gcin 是不管怎樣都用 server - client 架構
23:04 < caleb-> gcin 支援兩種 protocol, XIM 和 gcin protocol
23:04 < gogonkt> 哦
23:04 < caleb-> GTK / Qt 透過 gcin protocol 可以召喚 gcin server, 不需要事先啟動 server
23:05 < caleb-> XIM protocol 一定要先啟動 server 才能用
23:05 < caleb-> gcin protocol 透過 /tmp/gcin-$USER/socket-* 聯絡，可以不需要先啟動 server
23:06 < gogonkt> 那不是程序啟動時一起啟動的麼?
23:06 < caleb-> gqview & -> load libgtk -> load gcin immodule -> 尋找 gcin server -> 若找不到就召喚一隻 gcin -> 用 gcin 
                protocol 連上
23:07 < caleb-> gqview & -> load libgtk -> load gcin immodule -> 尋找 gcin server -> 找到一隻 gcin -> 用 gcin protocol 連上
23:07  * gogonkt 召喚《第一次寫 IM 就上手》
23:07 < caleb-> 先寫 XIM only 吧
23:07 < caleb-> fcitx forth 版
23:08 < caleb-> 所以如果把  /tmp/gcin-$USER/socket-* 幹掉，gcin protocol 就死了
23:09 < gogonkt> 有看到 /tmp/gcin-$USER
23:10 < gogonkt> 我是現在還不太明瞭一個最最基本的IM 要處理哪些東西
23:12 < gogonkt> GUI 是可有可無?
23:12 < caleb-> XIM server (兼 hotkey grabber) -> 抓到 key -> 切換 輸入模式/非輸入模式 -> 繼續抓 key -> 送字
23:12 < caleb-> 會盲打就不用 gui
23:12 < caleb-> 很多 gcin user 根本不顯示候選字
23:12 < gogonkt> 哦，原來XIM server (兼 hotkey grabber)
23:12 < caleb-> 從頭到尾看不到候選字視窗
23:13 < caleb-> gcin 可以在任何模式下按 Alt-Shift-key 送特殊符號或字串
23:13 < caleb-> 所以 非輸入模式 下也要考慮可以送字
23:14 < gogonkt> XIM client 做什麼的?
23:14 < caleb-> gogonkt: 比如 xterm 就是一個 XIM client
23:14 < caleb-> 透過 XIM 使用輸入法的程序都是 XIM client
23:15 < gogonkt> xterm 不是輸入法來的啊???
23:15 < caleb-> gogonkt: GTK / Qt 程序可以身為 XIM client 也可以不用 XIM, 那就變成不是 XIM client
23:16 < caleb-> XIM 是 server - client 啊
23:16 < caleb-> fcitx 是 XIM server, 用 fcitx 打字的程序就是 XIM client
23:16 < gogonkt> 哦，大悟!
23:17 < caleb-> gogonkt: 當 XIM server crash 時，當前使用中的 active XIM client 會一起 crash
23:17 < caleb-> 這是 XIM 設計上的問題，無法避免
23:17 < gogonkt> 程序也會關掉?
23:17 < caleb-> gogonkt: 你可以試試 xterm & -> 用 fcitx 打字 -> 在 xterm pkill -9 fcitx -> 看見 xterm 一起死
23:18 < gogonkt> 還真沒這樣搞過
23:18 < caleb-> 可能會殘留 gui 屍體在畫面上，但 XIM client 是死定了
23:19 < gogonkt> 這時 xterm 還能用麼?
23:19 < caleb-> 不能用了
23:19 < gogonkt> 明了
23:19 < caleb-> 用 GTK / Qt immodule 就沒這問題
23:19 < caleb-> 因為只是一個 GTK / Qt module crash 而已
23:20 < caleb-> 只有該 module 的功能失效
23:20 < gogonkt> 怎樣*nix 不定一個公共的出來....
23:20 < caleb-> 而且 GTK / Qt 可以 reload immodule 造成「好像沒當掉」的假像
23:20 < gogonkt> 搞這麼多個方法... 真是的
23:21 < caleb-> immodule crash 時 gnome-terminal 還是可以繼續用
23:21 < caleb-> 而且再按兩次輸入法切換鍵，immodule 又會復活
23:21 < caleb-> 其實只是 reload immodule
23:21 < gogonkt> 原來這樣的
23:22 < gogonkt> 把這個匯原文吧
23:22 < gogonkt> 成文
23:23 < caleb-> gogonkt: 等你寫好，你的 code 就可以當文件了
23:23 < gogonkt> UIM 不用 XIM 那又是什麼原理?
23:23 < gogonkt> 哦，那是的
23:24 < caleb-> 一樣是類似 gcin protocol 的東西
23:24 < gogonkt> forth code 看起來很清爽
23:24 < caleb-> gogonkt: 話說也可以用 openvanilla 當你的 輸入法engine
23:25 < caleb-> gogonkt: 有 scim-openvanilla
23:25 < caleb-> gogonkt: ucimf 也是用 openvanilla module 
23:25 < gogonkt> 就是說，我要寫的就是  XIM server (兼 hotkey grabber) -> 抓到 key -> 切換 輸入模式/非輸入模式 -> 繼續抓 key -> 
                 送字 ?
23:26 < caleb-> 對
23:26 < gogonkt> 什麼叫 用 openvanilla 當你的 輸入法engine
23:26 < caleb-> 單純的 XIM server 其實架構很簡單
23:26 < caleb-> 困難的部份 IMdkit 都寫好了
23:27 < caleb-> 眾多的 bug 也在這數十年間被前輩們修完了
23:27 < caleb-> 眾多的 IMdkit bugs 也在這數十年間被前輩們修完了
23:27 < caleb-> 眾多的 IMdkit bugs 也在這十數年間被前輩們修完了
23:27  * caleb- XIM 好像還不到 20 年
23:29 < gogonkt> 那個誰，把寫XIM 的IM 說得多容易，10多分鍾就寫好了，也不放出來看看 :(
23:30  * caleb- 之前有用 gcin 改一個「內碼輸入法」XIM server
23:30 < caleb-> 簡單到爆，只能用內碼輸入法
23:30 < gogonkt> <<輸入法教shi>>
23:33 < caleb-> 差不多只剩 gcin.cpp / eve.cpp / intcode* 這樣
23:33 < gogonkt> 能再做個看看麼.....
23:33  * caleb- 懶…
23:34 < caleb-> gcin 基本 code 很簡單的
23:34 < gogonkt> engine  留空就好了
23:34 < caleb-> 難的是 tsin 算法
23:34 < caleb-> gui 部份絕對比 fcitx 好懂
23:35 < gogonkt> gcin 的 main.c 也看不明...
23:36 < gogonkt> 唉
23:36 < caleb-> gogonkt: 先看 #define USE_XIM 的就好
23:36 < caleb-> gogonkt: 透過 IC.h 和 IMdkit 溝通
23:37 < caleb-> #USE_XIM 的部份基本可以全部照抄，不過我不知要如合轉成 forth
3:37 < caleb-> s/合/何/   
23:34 < caleb-> gcin 基本 code 很簡單的
23:34 < gogonkt> engine  留空就好了
23:34 < caleb-> 難的是 tsin 算法
23:34 < caleb-> gui 部份絕對比 fcitx 好懂
23:35 < gogonkt> gcin 的 main.c 也看不明...
23:36 < gogonkt> 唉
23:36 < caleb-> gogonkt: 先看 #define USE_XIM 的就好
23:36 < caleb-> gogonkt: 透過 IC.h 和 IMdkit 溝通
23:37 < caleb-> #USE_XIM 的部份基本可以全部照抄，不過我不知要如合轉成 forth



Mon Oct 26 23:48:33 HKT 2009
00:48 < gogonkt> 好吧，想把 #if dbg....#endif 間的內容去掉，有什麼辦法?
00:50 < 黑格尔> state machine lol
00:50 <@FKtPp> sed -i~ -e '/^#if dbg/,/^endif/d' xxxxx.c


2009年 10月 27日 星期二 00:52:20 HKT
